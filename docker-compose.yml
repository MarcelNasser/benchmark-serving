version: '3.5'

services:
  # redis DB:
  ## redis can be reached through the private address
  redis:
    container_name: redis
    image: redis:latest
    networks:
      test_vnet:
        ipv4_address: 172.16.0.5

  # go-server:
  ## server can be reached through the private address
  go-server:
    extends:
      service: .server
      file: .build/docker-compose-template.yml
    container_name: go-server
    image: marcelndeffo/tests:go-server
    build: go
    ports:
      - "8002:8000"
    environment:
      USERNAME: ${USERNAME:-default}
      PASSWORD: ${PASSWORD:-}
      DB: 0
    networks:
      test_vnet:
        ipv4_address: 172.16.0.2

  # python-server1: uses default HttpServer Lib of python
  ## server can be reached through the private address
  python-server:
    extends:
      service: .server
      file: .build/docker-compose-template.yml
    container_name: python-server
    image: marcelndeffo/tests:python-server
    build:
      context: python
      dockerfile: dockerfile
    ports:
      - "8000:8000"
    environment:
      USERNAME: ${USERNAME:-default}
      PASSWORD: ${PASSWORD:-}
      DB: 1
    networks:
      test_vnet:
        ipv4_address: 172.16.0.3

  # python-server2: uses fastapi
  ## server can be reached through the private address
  python-fastapi:
    extends:
      service: .server
      file: .build/docker-compose-template.yml
    container_name: python-fastapi
    image: marcelndeffo/tests:python-fastapi
    build:
      context: python-fastapi
      dockerfile: dockerfile
    ports:
      - "8001:8000"
    environment:
      USERNAME: ${USERNAME:-default}
      PASSWORD: ${PASSWORD:-}
      DB: 3
    networks:
      test_vnet:
        ipv4_address: 172.16.0.8

  # nodejs-server:
  ## server can be reached through the private address
  nodejs-server:
    extends:
      service: .server
      file: .build/docker-compose-template.yml
    container_name: nodejs-server
    image: marcelndeffo/tests:nodejs-server
    build: nodejs
    ports:
      - "8003:8000"
    environment:
      USERNAME: ${USERNAME:-default}
      PASSWORD: ${PASSWORD:-}
      DB: 2
    networks:
      test_vnet:
        ipv4_address: 172.16.0.4

  monitoring:
    container_name: monitoring
    image: gcr.io/cadvisor/cadvisor:v0.36.0
    ports:
      - "3000:8080"
    networks:
      test_vnet:
        ipv4_address: 172.16.0.6
    volumes:
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
      - "/sys:/sys:ro"
      - "/var/run:/var/run:ro"
      - "/:/rootfs:ro"

  load-server:
    container_name: load-server
    deploy:
      resources:
        limits:
          cpus: 0.5 # just in case locust spirals out of control
    image: locustio/locust
    ports:
      - "8089:8089"
    volumes:
      - "./bench/locust/:/mnt/locust"
    command: -f /mnt/locust/locustfile.py
    environment:
      SERVER: python
    networks:
      test_vnet:
        ipv4_address: 172.16.0.7
    extra_hosts:
      - "go:172.16.0.2"
      - "python:172.16.0.3"
      - "nodejs:172.16.0.4"
      - "fastapi:172.16.0.8"

networks:
  test_vnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/24